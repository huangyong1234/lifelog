20: 
电话区号码查询初始化功能 bug 修复：
描述：istanbul 登录应用中，电话号码选择框，会根据ip查询所属国家，但是由于系统对于部分地区与国家没有开放，
因此需要进行过滤。由于系统在开发的时候，没有考虑过滤，从而导致电话区号码初始化错误；
方案：由于根据ip查询到的国家没有过滤导致问题。目前处理的方法直接写在istanbul中，其实这部分功能应该共用起来，放到sian中更加合适；如果第二次遇到这种修改的时候， 就统一迁移到sian中 ；

测试反馈 bug 未修复成功问题：
描述：本地由于没有测试（由于对代码足盲目自信），所以跟踪了下测试的问题。 
分析：
1 在过滤过程调用的rpc服务查询地区信息使用了java缓存，缓存的更新采用了分布式job，这样带来的问题是，数据库修改的信息，无法更新到缓存中，因为job没有调用；
公司的job调用，测试还不熟悉，很多人不会使用；
方法：让测试直接重启sian应用刷新缓存，问题解决；

fci项目中采用vue，跳转页面报错：
请采用this.$router.push('real_path')

LRUCache实现：
知乎作者一篇lrucahe实现，采用自己实现的双向链表和hashmap结合。作者觉得linkedhashmap无法实现，但是在看dubbo的源码的时候发现，dubbo中的lrucache就是以linkedhashmap实现的
于是了解一下原理：linkedhashmap提供构造函数传入accessorder，如果传入值为true，hashmap会在插入时检测是否达到map最大容量， 如果容量达到最大值，则将列表头部的最近最少访问
节点删除，从而实现lru
感悟：在写代码时，切勿想当然认为自己的是最好的。

redis Lru实现：
redis采用的lru为了避免构造的数据结构占用内存问题，使用随机算法选择key，进行检查最老的元素，从而进行释放。
感悟：在实际项目中，根据实际情况选择合适的策略，不一定要完整实现一个比较耗时或者耗内存的算法。
